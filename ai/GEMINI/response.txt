```python
from manim import *

class EarthSeasons(Scene):
    def construct(self):
        # --- Constants ---
        SUN_RADIUS = 1.0
        EARTH_RADIUS = 0.3
        ORBIT_RADIUS_X = 5.0  # Semi-major axis for elliptical orbit
        ORBIT_RADIUS_Y = 3.5  # Semi-minor axis for elliptical orbit
        AXIAL_TILT_DEGREES = 23.5 # Earth's axial tilt in degrees

        # --- Colors ---
        SUN_COLOR = YELLOW
        EARTH_COLOR = BLUE_D
        AXIS_COLOR = WHITE
        ORBIT_COLOR = GRAY_A
        RAY_COLOR = YELLOW_A
        TEXT_COLOR = WHITE
        HIGHLIGHT_COLOR = RED_C

        # --- Mobjects ---
        # Sun
        sun = Circle(radius=SUN_RADIUS, color=SUN_COLOR, fill_opacity=1).move_to(ORIGIN)
        sun_label = Text("Sun", font_size=32, color=TEXT_COLOR).next_to(sun, DOWN)

        # Earth and its axis
        earth_circle = Circle(radius=EARTH_RADIUS, color=EARTH_COLOR, fill_opacity=1)
        # Earth's axis: a line passing through Earth's center, tilted
        axis_length = EARTH_RADIUS * 2.5 # Make axis slightly longer than Earth's diameter
        earth_axis = Line(ORIGIN + axis_length/2 * DOWN, ORIGIN + axis_length/2 * UP, color=AXIS_COLOR)
        # Rotate axis by -23.5 degrees (clockwise from vertical 'UP') to represent the tilt
        # This rotation is relative to its own center, and then the VGroup will move it
        # while preserving its orientation in the scene's coordinate system.
        earth_axis.rotate(DEGREES(-AXIAL_TILT_DEGREES), about_point=ORIGIN) 

        # Group Earth circle and axis. This group will move together as Earth orbits.
        earth = VGroup(earth_circle, earth_axis)

        # Orbital path: an ellipse centered at the Sun
        orbital_path = Ellipse(width=ORBIT_RADIUS_X * 2, height=ORBIT_RADIUS_Y * 2, color=ORBIT_COLOR)

        # --- Information and Season Labels ---
        title = Text("Earth's Seasons", font_size=48, color=TEXT_COLOR).to_edge(UP)
        initial_info = Text("Earth orbits the Sun on an elliptical path.", font_size=28, color=TEXT_COLOR).next_to(title, DOWN)
        tilt_info = Text("Earth's axis is tilted by 23.5Â° relative to its orbit.", font_size=28, color=TEXT_COLOR).next_to(initial_info, DOWN)
        
        # Season display
        season_text_label = Text("Current Season (N.H.):", font_size=32, color=TEXT_COLOR).to_corner(UL).shift(0.5*DOWN)
        current_season_text = Text("", font_size=32, color=HIGHLIGHT_COLOR).next_to(season_text_label, RIGHT)
        explanation_text = Text("", font_size=28, color=TEXT_COLOR).to_corner(DR).shift(0.5*UP)

        # --- Initial Scene Setup ---
        self.play(FadeIn(title))
        self.wait(0.5)
        self.play(Create(sun), FadeIn(sun_label))
        self.play(Create(orbital_path))
        self.play(FadeIn(initial_info))
        self.wait(2)

        # Set initial position of Earth for Vernal Equinox (angle 0, right side of ellipse)
        initial_angle = 0 
        earth.move_to(orbital_path.point_at_angle(initial_angle))

        self.play(FadeIn(earth), FadeOut(initial_info))
        self.play(FadeIn(tilt_info))
        self.wait(2)
        self.play(FadeOut(tilt_info))

        # --- Helper Function for Light Rays ---
        # Creates parallel lines representing sunlight originating from a distant source (left of scene)
        def create_light_rays(earth_mobject, num_rays=7):
            rays = VGroup()
            # Define the x-coordinate for the start/end of rays (far left/right)
            source_x = sun.get_center()[0] - ORBIT_RADIUS_X * 2.5 
            target_x = sun.get_center()[0] + ORBIT_RADIUS_X * 2.5

            # Determine the vertical extent where rays should pass through Earth
            earth_top_y = earth_mobject.get_center()[1] + EARTH_RADIUS
            earth_bottom_y = earth_mobject.get_center()[1] - EARTH_RADIUS

            # Distribute rays evenly vertically across Earth's approximate diameter
            y_coords = np.linspace(earth_bottom_y, earth_top_y, num_rays)
            
            for y in y_coords:
                ray = Line(np.array([source_x, y, 0]), np.array([target_x, y, 0]), color=RAY_COLOR, stroke_width=2)
                rays.add(ray)
            return rays

        # --- Seasonal Points (ordered counter-clockwise for animation flow) ---
        # Angles are in radians, measured counter-clockwise from the positive X-axis
        # 0        -> Vernal Equinox (N.H.) - Earth at the right
        # PI/2     -> Summer Solstice (N.H.) - Earth at the top
        # PI       -> Autumnal Equinox (N.H.) - Earth at the left
        # 3*PI/2   -> Winter Solstice (N.H.) - Earth at the bottom
        
        seasonal_points_ccw = [
            {"angle": 0,        "season_nh": "Vernal Equinox", "explanation": "Neither hemisphere is tilted towards/away from the Sun, resulting in equal day and night lengths globally."},
            {"angle": PI/2,     "season_nh": "Summer Solstice", "explanation": "Northern Hemisphere is tilted towards the Sun, receiving more direct sunlight and having longer days."},
            {"angle": PI,       "season_nh": "Autumnal Equinox", "explanation": "Neither hemisphere is tilted towards/away from the Sun, resulting in equal day and night lengths globally."},
            {"angle": 3*PI/2,   "season_nh": "Winter Solstice", "explanation": "Northern Hemisphere is tilted away from the Sun, receiving less direct sunlight and having shorter days."}
        ]
        
        # --- Seasonal Explanation Animation ---
        self.play(FadeIn(season_text_label, current_season_text, explanation_text))

        # Use a ValueTracker to control Earth's angular position along the orbit
        # This allows for precise control of movement and pausing.
        orbit_angle_tracker = ValueTracker(initial_angle)

        # Add an updater to Earth: its position is continuously updated based on the tracker's value.
        earth.add_updater(lambda m: m.move_to(orbital_path.point_at_angle(orbit_angle_tracker.get_value())))

        # Show initial Vernal Equinox state
        self.play(
            current_season_text.animate.set_text(seasonal_points_ccw[0]["season_nh"]),
            explanation_text.animate.set_text(seasonal_points_ccw[0]["explanation"]),
            run_time=1
        )
        rays_initial = create_light_rays(earth_circle)
        self.add(rays_initial) # Use add for instant appearance and remove later
        self.wait(3)
        self.remove(rays_initial)

        # Duration for Earth to move through one quarter of its orbit
        quarter_orbit_duration = 5 # seconds

        # Loop through each season to explain the change
        for i in range(len(seasonal_points_ccw)):
            next_index = (i + 1) % len(seasonal_points_ccw) # Cycle back to 0 after last point
            next_season_data = seasonal_points_ccw[next_index]
            
            # Animate Earth's movement to the next seasonal point
            # If it's the last segment (3*PI/2 to 0), animate to 2*PI to complete the circle visually
            target_angle_for_animation = next_season_data["angle"] if next_season_data["angle"] != 0 else 2*PI
            
            self.play(
                orbit_angle_tracker.animate.set_value(target_angle_for_animation),
                run_time=quarter_orbit_duration,
                rate_func=linear # Constant speed orbit
            )
            
            # Update season texts to reflect the current season
            self.play(
                current_season_text.animate.set_text(next_season_data["season_nh"]),
                explanation_text.animate.set_text(next_season_data["explanation"]),
                run_time=0.5
            )
            
            # Show light rays for the current season's orientation
            current_rays = create_light_rays(earth_circle)
            self.add(current_rays)
            self.wait(3) # Pause to allow user to read explanation and observe
            self.remove(current_rays) # Remove rays before next segment

        # --- Final Cleanup ---
        # Remove the updater from Earth before fading it out
        earth.remove_updater(earth.updaters[0]) 

        self.play(FadeOut(season_text_label, current_season_text, explanation_text))
        self.play(FadeOut(earth, sun, sun_label, orbital_path, title))
        self.wait(1)
```